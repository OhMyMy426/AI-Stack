Hello, my name is Xiyu. Today I'm going to present the microservice architecture. In the UML diagram, we have two microservices. The first one is the payment service, the next one is the rental service, and within each of them we have similar structure. At first we have controller to handle the request from the client side, and then we will call the functions within the service classes namely here we will handle the complex back-end logic and moreover in the case we want to call the service from another microservice we will use the rental service client or the payment service client to call another microservice and we have also two classes for the simplified database operations and from this uml it quite obvious you see that as we have two distinct systems and each of them is only responsible for their own functionalities For example within the payment service we will only do the payment Within the rental service we will only handle the rental logic so that we can have a better readability, and it's very easy to extend in the future, so that we can achieve the low coupling and high cohesion principle. And now let's have a look at the code. At first, the payment controller. At first, we have two important functions. At first, the create payment as a post request and payment confirmation with a put request. and we have the parameters as the request body or the path variable and we will also call the corresponding functions within the service class and let have a look have a look at this for example at first we will do a simple verification and we will search for the object from the database and we will save the database again and then we want to call the microservice from we will call the function from another microservices here. Here we use the put request to the rental service and by adding the correct URI and the correct parameter and so that we can communicate with another microservice and now for the rental controller we have this something similar. We at first have the put request for the put payment and the post request for the create rental And now let have a look at the code from the service side And here we also do a simple verification and here we also call the service from another microservice here using the post request. So according to generally to see that is we can have multiple advantages here at first it's very fast and flexible for us to develop because we have two distinct systems and teams can easily independently develop. However, there are also some disadvantages. At first, because we have different microservices, we will have additional operational overhead for the DevOps team for the testing or the deployment moreover we sometimes also have the network issue due to the communication between different micro services